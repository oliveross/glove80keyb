/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3
#define NAVIGATION 4
#define SYMBOL 5

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
        
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hm_ex: homerow_mods_extended {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_EXTENDED";
            #binding-cells = <2>;
            tapping-term-ms = <275>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp F1         &kp F2            &kp F3                 &kp F4             &kp F5                                                                                                                           &kp F6                  &kp F7              &kp F8                  &kp F9                  &kp F10
            &kp EQUAL      &kp N1            &kp N2                 &kp N3             &kp N4                      &kp N5                                                                                       &kp N6  &kp N7                  &kp N8              &kp N9                  &kp N0                  &kp MINUS
            &kp TAB        &kp Q             &kp W                  &kp E              &kp R                       &kp T                                                                                        &kp Y   &kp U                   &kp I               &kp O                   &kp P                   &kp BSLH
            &kp ESC        &hm LEFT_SHIFT A  &hm_ex LEFT_CONTROL S  &hm_ex LEFT_ALT D  &hm_ex LEFT_COMMAND F       &kp G                                                                                        &kp H   &hm_ex RIGHT_COMMAND J  &hm_ex RIGHT_ALT K  &hm_ex RIGHT_CONTROL L  &hm RIGHT_SHIFT SEMI    &kp SQT
            &kp GRAVE      &kp Z             &kp X                  &kp C              &kp V                       &kp B   &lt NAVIGATION ENTER   &kp LCTRL   &layer_td  &kp LGUI  &kp RCTRL &lt SYMBOL SPACE   &kp N   &kp M   &kp COMMA   &kp DOT     &kp FSLH    &kp PG_UP
            &magic MAGIC 0 &kp HOME          &kp END                &kp LEFT           &kp RIGHT                           &kp TAB                &kp DEL     &kp LALT   &kp RALT  &kp RET   &kp bspc_del       &kp UP  &kp DOWN    &kp LBKT    &kp RBKT    &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &trans            &none               &none           &none           &none           &kp HOME                                                                              &kp LPAR     &kp KP_NUM   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans            &none               &none           &kp UP          &none           &kp END                                                                               &kp RPAR     &kp KP_N7    &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp SLCK
            &trans            &none               &kp LEFT        &kp DOWN        &kp RIGHT       &kp PG_UP                                                                             &kp PRCNT    &kp KP_N4    &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &none
            &trans            &kp K_CMENU         &none           &kp F11         &kp F12         &kp PG_DN       &trans      &trans      &to DEFAULT &trans      &trans      &trans    &kp COMMA    &kp KP_N1    &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
            &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &trans      &trans      &trans                 &kp KP_N0    &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };

        navigation_layer {
            bindings = <
            &none        &none               &none           &none           &none                                                                                                           &none                   &none             &none                    &none              &none
            &none        &none               &none           &none           &none           &none                                                                                &none      &none                   &none             &none                    &none              &none
            &none        &kp LG(C)               &kp LG(V)           &kp LG(LBKT)           &kp LG(RBKT)           &none                                                          &none      &none                   &none             &none                    &none              &none
            &none        &kp LEFT_SHIFT  &hm LEFT_CONTROL C_MUTE  &hm LEFT_ALT C_VOL_DN  &hm LEFT_COMMAND C_VOL_UP       &none                                                    &kp LEFT   &hm RIGHT_COMMAND DOWN  &hm RIGHT_ALT UP  &hm RIGHT_CONTROL RIGHT  &kp RIGHT_SHIFT    &none
            &none        &none               &none           &none           &none           &none           &none     &none     &none            &none     &none     &none       &none      &kp C_PREVIOUS     &kp C_PLAY_PAUSE  &kp C_NEXT      &none      &none
            &none        &none               &none           &none           &none                           &none     &none     &none            &none     &none     &none                  &none      &none      &none      &none      &none
            >;
        };

        symbol_layer {
            bindings = <
            &none        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &none
            &none        &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none      &kp N1            &kp N2                 &kp N3             &kp N4                      &kp N5                                                             &kp N6  &kp N7                  &kp N8              &kp N9                  &kp N0                  &kp GRAVE
            &none        &kp LEFT_SHIFT  &hm LEFT_CONTROL C_MUTE  &hm LEFT_ALT C_VOL_DN  &hm LEFT_COMMAND C_VOL_UP       &kp G                                                    &none &hm RIGHT_COMMAND MINUS  &hm RIGHT_ALT EQUAL  &hm RIGHT_CONTROL LBKT  &hm RIGHT_SHIFT RBKT    &none
            &none        &none               &none           &none           &none           &none           &none     &none     &none            &none     &none     &none       &none      &none      &none      &none      &none      &none
            &none        &none               &none           &none           &none                           &none     &none     &none            &none     &none     &none                  &none      &none      &none      &none      &none
            >;
        };
    };
};
